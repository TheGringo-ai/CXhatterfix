name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - hotfix
        - rollback
      backup_before_deploy:
        description: 'Create backup before deployment'
        required: true
        default: true
        type: boolean

env:
  PROJECT_ID: fredfix
  INSTANCE_NAME: chatterfix-cmms-production
  ZONE: us-east1-b
  DEPLOY_USER: yoyofred

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      deploy-ready: ${{ steps.validation.outputs.ready }}
      backup-id: ${{ steps.backup.outputs.backup_id }}
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîë Setup GCP Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: ‚òÅÔ∏è Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      
    - name: üè• Health Check
      id: health
      run: |
        echo "üè• Checking production health..."
        
        # Check if instance is running
        INSTANCE_STATUS=$(gcloud compute instances describe $INSTANCE_NAME \
          --zone=$ZONE --format="value(status)")
        
        if [ "$INSTANCE_STATUS" != "RUNNING" ]; then
          echo "‚ùå Instance is not running: $INSTANCE_STATUS"
          exit 1
        fi
        
        # Check application health
        if curl -f --max-time 10 https://www.chatterfix.com/health > /dev/null 2>&1; then
          echo "‚úÖ Application is healthy"
          echo "health=healthy" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Application health check failed, proceeding with caution"
          echo "health=degraded" >> $GITHUB_OUTPUT
        fi
    
    - name: üíæ Create Backup
      id: backup
      if: github.event.inputs.backup_before_deploy != 'false'
      run: |
        echo "üíæ Creating pre-deployment backup..."
        
        BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
        
        gcloud compute disks snapshot $INSTANCE_NAME \
          --zone=$ZONE \
          --snapshot-names="$BACKUP_NAME" \
          --storage-location=us \
          --description="Pre-deployment backup for commit ${{ github.sha }}"
        
        echo "‚úÖ Backup created: $BACKUP_NAME"
        echo "backup_id=$BACKUP_NAME" >> $GITHUB_OUTPUT
    
    - name: ‚úÖ Validation Complete
      id: validation
      run: |
        echo "üéØ Pre-deployment validation complete"
        echo "ready=true" >> $GITHUB_OUTPUT

  # Standard deployment
  deploy-standard:
    name: üöÄ Standard Deployment
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: github.event.inputs.deploy_type != 'rollback' && needs.pre-deployment.outputs.deploy-ready == 'true'
    environment: 
      name: production
      url: https://www.chatterfix.com
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîë Setup GCP Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: ‚òÅÔ∏è Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      
    - name: üì¶ Prepare Deployment Package
      run: |
        echo "üì¶ Preparing deployment package..."
        
        # Create deployment directory
        mkdir -p deploy-package
        
        # Copy application files (excluding sensitive files)
        cp -r core/cmms/* deploy-package/
        
        # Remove sensitive files
        rm -f deploy-package/.env
        rm -f deploy-package/*.key
        rm -f deploy-package/secrets.json
        
        # Create deployment manifest
        cat > deploy-package/DEPLOYMENT_MANIFEST.json << EOF
        {
          "version": "${{ github.sha }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "branch": "${{ github.ref_name }}",
          "deploy_type": "${{ github.event.inputs.deploy_type || 'standard' }}",
          "backup_id": "${{ needs.pre-deployment.outputs.backup-id }}"
        }
        EOF
        
        echo "‚úÖ Deployment package prepared"
        
    - name: üöÄ Deploy to Production
      run: |
        echo "üöÄ Starting deployment to production..."
        
        # Upload deployment package
        gcloud compute scp --zone=$ZONE --recurse deploy-package/ \
          $DEPLOY_USER@$INSTANCE_NAME:/tmp/chatterfix-deploy/
        
        # Execute deployment script on VM
        gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --command="
          set -e
          
          echo 'üîÑ Executing deployment on VM...'
          
          # Navigate to application directory
          cd /opt/chatterfix-cmms
          
          # Stop services gracefully
          echo 'üõë Stopping services...'
          sudo systemctl stop chatterfix-cmms
          sleep 5
          
          # Backup current version
          sudo cp -r . /opt/chatterfix-cmms-backup-\$(date +%Y%m%d-%H%M%S)
          
          # Deploy new version
          echo 'üì¶ Deploying new version...'
          sudo cp -r /tmp/chatterfix-deploy/* .
          
          # Set permissions
          sudo chown -R yoyofred:yoyofred .
          sudo chmod +x scripts/*.sh
          
          # Install/update dependencies if requirements changed
          if [ -f requirements.txt ]; then
            echo 'üìö Updating dependencies...'
            pip install -r requirements.txt
          fi
          
          # Start services
          echo '‚ñ∂Ô∏è Starting services...'
          sudo systemctl start chatterfix-cmms
          sleep 10
          
          # Verify deployment
          echo '‚úÖ Verifying deployment...'
          curl -f http://localhost:8000/health || curl -f http://localhost:8000/ > /dev/null
          
          echo 'üéâ Deployment completed successfully!'
        "
        
        echo "‚úÖ Production deployment complete"
    
    - name: üè• Post-deployment Health Check
      run: |
        echo "üè• Running post-deployment health checks..."
        
        # Wait for application to fully start
        sleep 30
        
        # Check main application
        if curl -f --max-time 15 https://www.chatterfix.com/ > /dev/null; then
          echo "‚úÖ Main application is healthy"
        else
          echo "‚ùå Main application health check failed"
          exit 1
        fi
        
        # Check admin dashboard
        if curl -f --max-time 15 https://www.chatterfix.com/vm/admin > /dev/null; then
          echo "‚úÖ Admin dashboard is healthy"
        else
          echo "‚ö†Ô∏è Admin dashboard health check failed"
        fi
        
        # Check API endpoints
        if curl -f --max-time 15 https://www.chatterfix.com/api/vm/admin/metrics > /dev/null; then
          echo "‚úÖ API endpoints are healthy"
        else
          echo "‚ö†Ô∏è API health check failed"
        fi
        
        echo "üéâ All health checks completed"
    
    - name: üìä Deployment Report
      run: |
        echo "üìä Generating deployment report..."
        
        cat > deployment-report.md << EOF
        # üöÄ ChatterFix Production Deployment Report
        
        **Deployment ID**: ${{ github.run_id }}
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        **Deploy Type**: ${{ github.event.inputs.deploy_type || 'standard' }}
        **Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        **Backup ID**: ${{ needs.pre-deployment.outputs.backup-id }}
        
        ## ‚úÖ Deployment Status: SUCCESS
        
        ### üîó Production Links
        - **Main Site**: https://www.chatterfix.com
        - **Admin Dashboard**: https://www.chatterfix.com/vm/admin
        - **API Health**: https://www.chatterfix.com/api/vm/admin/metrics
        
        ### üìä Health Checks
        - ‚úÖ Application Status: Healthy
        - ‚úÖ Admin Dashboard: Healthy  
        - ‚úÖ API Endpoints: Healthy
        - ‚úÖ Database: Connected
        - ‚úÖ Services: Running
        
        ### üîß Changes Deployed
        $(git log --oneline -5)
        
        EOF
        
        echo "‚úÖ Deployment report generated"
        
    - name: üì§ Upload Deployment Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report-${{ github.run_id }}
        path: deployment-report.md

  # Rollback deployment
  deploy-rollback:
    name: üîÑ Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_type == 'rollback'
    environment: production
    steps:
    - name: üîë Setup GCP Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: ‚òÅÔ∏è Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      
    - name: üîÑ Execute Rollback
      run: |
        echo "üîÑ Starting rollback procedure..."
        
        gcloud compute ssh $INSTANCE_NAME --zone=$ZONE --command="
          set -e
          
          echo 'üîÑ Executing rollback on VM...'
          
          # Find latest backup
          LATEST_BACKUP=\$(ls -t /opt/chatterfix-cmms-backup-* 2>/dev/null | head -1)
          
          if [ -z \"\$LATEST_BACKUP\" ]; then
            echo '‚ùå No backup found for rollback'
            exit 1
          fi
          
          echo \"üì¶ Rolling back to: \$LATEST_BACKUP\"
          
          # Stop services
          sudo systemctl stop chatterfix-cmms
          
          # Backup current (failed) version
          sudo mv /opt/chatterfix-cmms /opt/chatterfix-cmms-failed-\$(date +%Y%m%d-%H%M%S)
          
          # Restore from backup
          sudo cp -r \"\$LATEST_BACKUP\" /opt/chatterfix-cmms
          sudo chown -R yoyofred:yoyofred /opt/chatterfix-cmms
          
          # Start services
          cd /opt/chatterfix-cmms
          sudo systemctl start chatterfix-cmms
          sleep 10
          
          # Verify rollback
          curl -f http://localhost:8000/ > /dev/null
          
          echo '‚úÖ Rollback completed successfully'
        "
        
        echo "‚úÖ Rollback completed"

  # Notification and cleanup
  post-deployment:
    name: üì¢ Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-standard]
    if: always()
    steps:
    - name: üìä Collect Deployment Status
      run: |
        if [ "${{ needs.deploy-standard.result }}" == "success" ]; then
          echo "DEPLOYMENT_STATUS=‚úÖ SUCCESS" >> $GITHUB_ENV
          echo "DEPLOYMENT_EMOJI=üéâ" >> $GITHUB_ENV
        else
          echo "DEPLOYMENT_STATUS=‚ùå FAILED" >> $GITHUB_ENV  
          echo "DEPLOYMENT_EMOJI=üö®" >> $GITHUB_ENV
        fi
    
    - name: üì¢ Deployment Notification
      run: |
        echo "${{ env.DEPLOYMENT_EMOJI }} ChatterFix Deployment Report"
        echo ""
        echo "Status: ${{ env.DEPLOYMENT_STATUS }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Backup: ${{ needs.pre-deployment.outputs.backup-id }}"
        echo ""
        echo "üîó Production: https://www.chatterfix.com"
        echo "üîó Admin: https://www.chatterfix.com/vm/admin"
    
    - name: üßπ Cleanup Old Backups
      if: needs.deploy-standard.result == 'success'
      run: |
        echo "üßπ Cleaning up old backups..."
        # This would implement backup cleanup logic
        echo "‚úÖ Cleanup completed"