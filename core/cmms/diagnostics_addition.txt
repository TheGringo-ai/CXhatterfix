# Equipment Diagnostics Assistant
@app.post("/cmms/diagnostics/analyze")
async def diagnose_equipment_issue(request_data: Dict[str, str]) -> Dict:
    """AI-powered equipment diagnostics assistant"""
    try:
        equipment_type = request_data.get("equipment_type", "")
        issue_description = request_data.get("issue_description", "")
        symptoms = request_data.get("symptoms", "")

        if not issue_description.strip():
            raise HTTPException(status_code=400, detail="Issue description is required")

        # Create diagnostic prompt for AI
        diagnostic_prompt = f"""
As an expert maintenance technician, analyze this equipment issue and provide diagnostic guidance:

Equipment: {equipment_type}
Issue: {issue_description}
Symptoms: {symptoms}

Provide:
1. Most likely causes (top 3)
2. Step-by-step diagnostic procedure
3. Required tools/parts
4. Safety considerations
5. Urgency level (low/medium/high/critical)

Keep response practical and actionable for technicians.
"""

        try:
            from ai import query_llama
            ai_diagnosis = await query_llama(diagnostic_prompt, "equipment_diagnostics", "diagnostic_specialist")
        except:
            # Fallback diagnosis
            ai_diagnosis = f"""
Diagnostic Analysis for {equipment_type}:

**Likely Causes:**
1. Mechanical wear or component failure
2. Electrical connection issues
3. Lubrication or maintenance needs

**Diagnostic Steps:**
1. Visual inspection - check for obvious damage
2. Check electrical connections and power supply
3. Test mechanical components for proper operation
4. Review maintenance records for patterns

**Tools Needed:**
- Basic hand tools
- Multimeter (if electrical)
- Lubrication supplies

**Safety:** Follow lockout/tagout procedures before starting work.

**Urgency:** Medium - address within 24-48 hours to prevent escalation.
"""

        # Determine urgency based on keywords
        urgency = "medium"
        issue_lower = issue_description.lower()
        if any(word in issue_lower for word in ["emergency", "down", "stopped", "fire", "smoke", "danger"]):
            urgency = "critical"
        elif any(word in issue_lower for word in ["urgent", "leak", "loud", "overheating"]):
            urgency = "high"
        elif any(word in issue_lower for word in ["routine", "minor", "slight"]):
            urgency = "low"

        return {
            "equipment_type": equipment_type,
            "issue_description": issue_description,
            "symptoms": symptoms,
            "urgency_level": urgency,
            "ai_diagnosis": ai_diagnosis,
            "diagnostic_completed": True,
            "timestamp": datetime.now().isoformat(),
            "next_steps": [
                "Follow diagnostic procedure outlined above",
                "Document findings in work order",
                "Order parts if needed",
                "Schedule repair based on urgency level"
            ]
        }

    except Exception as e:
        logger.error(f"Equipment diagnostics failed: {e}")
        raise HTTPException(status_code=500, detail=f"Diagnostics failed: {str(e)}")

@app.get("/cmms/diagnostics/demo")
async def diagnostics_demo_page():
    """Demo page for equipment diagnostics"""
    return HTMLResponse(content="""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Equipment Diagnostics Assistant Demo</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; }
        .demo-card { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .diagnose-btn { background: #e74c3c; color: white; border: none; padding: 12px 24px;
                       border-radius: 6px; cursor: pointer; font-size: 16px; }
        .diagnose-btn:hover { background: #c0392b; }
        textarea { width: 100%; height: 80px; margin: 10px 0; padding: 10px; border-radius: 4px; border: 1px solid #ddd; }
        input { width: 100%; padding: 8px; margin: 5px 0; border-radius: 4px; border: 1px solid #ddd; }
        .urgency-critical { background: #e74c3c; color: white; padding: 4px 12px; border-radius: 12px; }
        .urgency-high { background: #f39c12; color: white; padding: 4px 12px; border-radius: 12px; }
        .urgency-medium { background: #3498db; color: white; padding: 4px 12px; border-radius: 12px; }
        .urgency-low { background: #27ae60; color: white; padding: 4px 12px; border-radius: 12px; }
        .diagnosis-text { background: white; padding: 20px; border-radius: 8px; margin: 15px 0;
                         border-left: 4px solid #e74c3c; white-space: pre-line; }
    </style>
</head>
<body>
    <h1>üîß Equipment Diagnostics Assistant</h1>

    <div class="demo-card">
        <h3>Describe the Equipment Problem:</h3>
        <input type="text" id="equipment" placeholder="Equipment type (e.g., HVAC, Pump, Motor, Conveyor)" />
        <textarea id="issue" placeholder="Describe the issue (e.g., making loud noise, not starting, overheating)"></textarea>
        <textarea id="symptoms" placeholder="Additional symptoms (e.g., vibration, unusual sounds, error codes)"></textarea>
        <br>
        <button class="diagnose-btn" onclick="runDiagnostics()">üîç Run AI Diagnostics</button>
    </div>

    <div id="results"></div>

    <div class="demo-card">
        <h3>Quick Examples:</h3>
        <button onclick="fillExample('Motor', 'Motor not starting', 'No response when turned on, control lights are on')" style="margin: 5px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; background: white; cursor: pointer;">Motor Won't Start</button>
        <button onclick="fillExample('HVAC', 'Making loud noise', 'Grinding sound from fan area, vibration felt')" style="margin: 5px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; background: white; cursor: pointer;">Noisy HVAC</button>
        <button onclick="fillExample('Pump', 'Overheating and shutting down', 'Temperature alarm, pump stops after 10 minutes')" style="margin: 5px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; background: white; cursor: pointer;">Overheating Pump</button>
    </div>

    <script>
        function fillExample(equipment, issue, symptoms) {
            document.getElementById('equipment').value = equipment;
            document.getElementById('issue').value = issue;
            document.getElementById('symptoms').value = symptoms;
        }

        async function runDiagnostics() {
            const equipment = document.getElementById('equipment').value;
            const issue = document.getElementById('issue').value;
            const symptoms = document.getElementById('symptoms').value;
            const results = document.getElementById('results');

            if (!issue.trim()) {
                alert('Please describe the equipment issue');
                return;
            }

            results.innerHTML = '<div class="demo-card">üîÑ Running AI diagnostics analysis...</div>';

            try {
                const response = await fetch('/cmms/diagnostics/analyze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        equipment_type: equipment,
                        issue_description: issue,
                        symptoms: symptoms
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    displayDiagnostics(data);
                } else {
                    results.innerHTML = `<div class="demo-card" style="color: red;">Error: ${data.detail}</div>`;
                }

            } catch (error) {
                results.innerHTML = `<div class="demo-card" style="color: red;">Error: ${error.message}</div>`;
            }
        }

        function displayDiagnostics(data) {
            const urgencyClass = `urgency-${data.urgency_level}`;

            let html = `
                <div class="demo-card">
                    <h3>üîç Diagnostic Results</h3>
                    <p><strong>Equipment:</strong> ${data.equipment_type}</p>
                    <p><strong>Issue:</strong> ${data.issue_description}</p>
                    <p><strong>Urgency:</strong> <span class="${urgencyClass}">${data.urgency_level.toUpperCase()}</span></p>
                </div>

                <div class="demo-card">
                    <h3>ü§ñ AI Diagnostic Analysis</h3>
                    <div class="diagnosis-text">${data.ai_diagnosis}</div>
                </div>

                <div class="demo-card">
                    <h3>üìã Next Steps</h3>
                    <ul>
            `;

            data.next_steps.forEach(step => {
                html += `<li>${step}</li>`;
            });

            html += `
                    </ul>
                </div>
            `;

            document.getElementById('results').innerHTML = html;
        }
    </script>
</body>
</html>""")
